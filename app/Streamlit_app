!pip install streamlit
!pip install langchain
!pip install ctransformers
%%writefile app.py

import streamlit as st
from PIL import Image
import numpy as np
from tensorflow.keras.models import load_model
import tensorflow as tf

# Function to preprocess the image
def preprocess_image(image):
    # Resize the image to match the input shape of the model
    img = image.resize((img_width, img_height))
    # Convert image to numpy array
    img_array = np.array(img)
    # Normalize pixel values to be between 0 and 1
    img_array = img_array / 255.0
    # Expand dimensions to create a batch
    img_array = np.expand_dims(img_array, axis=0)
    return img_array

# Load the pre-trained model
model_path = 'deepfake_cnn.h5'  # Replace with the path to your pre-trained model
model = load_model(model_path)

# Define the input image dimensions
img_width, img_height = 150, 150

# Streamlit app
def main():
    st.title("Real vs Fake Image Detection")
    st.write("Upload an image to determine whether it's real or fake.")

    uploaded_image = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

    if uploaded_image is not None:
        image = Image.open(uploaded_image)
        st.image(image, caption='Uploaded Image', use_column_width=True)

        if st.button('Predict'):
            with st.spinner('Predicting...'):
                # Preprocess the image
                processed_image = preprocess_image(image)
                # Make prediction
                prediction = model.predict(processed_image)
                # Classify the image as real or fake based on the prediction
                if prediction[0][0] > 0.5:
                    st.success('The image is classified as FAKE with a confidence of {:.2f}%'.format(prediction[0][0] * 100))
                else:
                    st.warning('The image is classified as REAL with a confidence of {:.2f}%'.format((1 - prediction[0][0]) * 100))

if __name__ == "__main__":
    main()

!npm install localtunnel

import urllib
print("Password/Enpoint IP for localtunnel is:",urllib.request.urlopen('https://ipv4.icanhazip.com').read().decode('utf8').strip("\n"))

!streamlit run app.py &>/content/logs.txt &
!npx localtunnel --port 8501
